import { useRef, useEffect, useState } from "react";
import mapboxgl from "mapbox-gl";
import * as echarts from "echarts";
import { createRoot } from "react-dom/client";

import "mapbox-gl/dist/mapbox-gl.css";

function PopupContent({ chartOptions, selectedZone, nearbyPoints, onClose }) {
  const [isOpen, setIsOpen] = useState(true);

  const handleClose = () => {
    setIsOpen(false);
  };
  const chartContainerRef = useRef(null);
  const chartInstance = useRef(null);

  useEffect(() => {
    chartInstance.current = echarts.init(chartContainerRef.current);
    chartInstance.current.setOption(chartOptions);

    return () => {
      if (chartInstance.current) {
        chartInstance.current.dispose();
      }
    };
  }, [chartOptions]);

  return (
    <>
      {isOpen && (
        <div className="fixed w-5/6 h-4/5 m-2 top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 bg-white p-8 z-50">
          <div className="flex">
            <div className=" flex-col inline-grid h-fit text-nowrap">
              <h3>Selected Zone: {selectedZone.name}</h3>
              <h4>Nearby Points:</h4>
              <ul>
                {nearbyPoints.map((point, index) => (
                  <li key={index}>
                    Name: {point.name}, Distance: {point.distance} km
                  </li>
                ))}
              </ul>
            </div>
            <div className="w-3/5 p-1 mt-12 ml-5">
              <div ref={chartContainerRef} style={{ height: "380px" }} />
            </div>
          </div>
          <button
            className="absolute top-2 right-2 bg-gray-300 px-4 py-2 rounded"
            onClick={handleClose}
          >
            Close
          </button>
        </div>
      )}
    </>
  );
}
export default function Map({ chartOptions }) {
  const mapContainer = useRef(null);
  const map = useRef(null);
  const [zoom] = useState(12);
  const [selectedZone, setSelectedZone] = useState(null);
  const [nearbyPoints, setNearbyPoints] = useState([]);

  const zones = [
    { lng: 51.3604911, lat: 35.7290896, name: "کسبینو" },
    { lng: 51.35871958615119, lat: 35.72966733845604, name: "بوستان گلبرگ" },
    { lng: 51.35990007560366, lat: 35.73018886142751, name: "کوچه آریا" },
    { lng: 51.36099051944616, lat: 35.730326880026965, name: "خیابان مطهری" },
    { lng: 51.36184977368168, lat: 35.7300645271261, name: "کوچه یاس" },
    {
      lng: 51.361580052473556,
      lat: 35.72762511256171,
      name: "دبیرستان دکتر بهشتی ",
    },
    { lng: 51.392982, lat: 35.715364, name: "دانشگاه فرهنگ و هنر" },
    { lng: 51.407658, lat: 35.713598, name: "میدان ولی عصر" },
    { lng: 51.404101, lat: 35.719225, name: "خیابان طباطبایی" },
  ];

  mapboxgl.accessToken =
    "pk.eyJ1IjoicXVlMzIxNiIsImEiOiJjaWhxZmMxMDUwMDBzdXhsdWh0ZDkyMzVqIn0.sz3lHuX9erctIPE2ya6eCw";

  useEffect(() => {
    if (!map.current) {
      map.current = new mapboxgl.Map({
        container: mapContainer.current,
        style: "mapbox://styles/mapbox/streets-v11",
        center: [zones[0].lng, zones[0].lat],
        zoom: zoom,
      });

      zones.forEach((zone) => {
        const marker = new mapboxgl.Marker({ color: "#00ff00" })
          .setLngLat([zone.lng, zone.lat])
          .addTo(map.current);

        marker.getElement().addEventListener("click", () => {
          const popupContent = document.createElement("div");

          createRoot(popupContent).render(
            <PopupContent
              chartOptions={chartOptions}
              selectedZone={zone}
              nearbyPoints={findNearbyPoints(zone.lng, zone.lat, zone)}
            />
          );

          // Append the custom HTML element to the body
          document.body.appendChild(popupContent);
        });
      });
    }
  }, [chartOptions, zones, zoom]);

  const findNearbyPoints = (lng, lat, selectedZone) => {
    const calculateDistance = (lng1, lat1, lng2, lat2) => {
      const R = 6371;
      const dLat = ((lat2 - lat1) * Math.PI) / 180;
      const dLng = ((lng2 - lng1) * Math.PI) / 180;
      const a =
        Math.sin(dLat / 2) * Math.sin(dLat / 2) +
        Math.cos((lat1 * Math.PI) / 180) *
          Math.cos((lat2 * Math.PI) / 180) *
          Math.sin(dLng / 2) *
          Math.sin(dLng / 2);
      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
      const distance = R * c;
      return distance;
    };

    const nearbyPoints = zones.reduce((acc, zone) => {
      const distance = calculateDistance(zone.lng, zone.lat, lng, lat);
      if (distance <= 1 || distance <= 3) {
        acc.push({
          name: zone.name,
          distance: distance.toFixed(2),
        });
      }
      return acc;
    }, []);

    return nearbyPoints;
  };

  console.log(nearbyPoints);

  return (
    <div style={{ width: "100%", height: "100vh" }}>
      <div ref={mapContainer} style={{ width: "100%", height: "100%" }} />
    </div>
  );
}
